user nginx;
worker_processes auto;

error_log /var/log/nginx/error.log warn;
pid /tmp/nginx.pid;

events {
    worker_connections 1024;
}

http {
    resolver 127.0.0.11 valid=30s ipv6=off;  # Docker DNS resolver

    upstream backend_servers {
        server backend:8000 max_fails=3 fail_timeout=10s;
    }

    upstream frontend_servers {
        server frontend:5173 max_fails=3 fail_timeout=10s;
    }

    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # Optimization
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;

    # Compression
    gzip on;
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types text/plain text/css text/xml application/json 
               application/javascript application/xml+rss 
               application/atom+xml image/svg+xml;

    # Security headers
    add_header X-Frame-Options "SAMEORIGIN";
    add_header X-XSS-Protection "1; mode=block";
    add_header X-Content-Type-Options "nosniff";
    add_header Referrer-Policy "strict-origin-when-cross-origin";
    add_header Content-Security-Policy "default-src 'self'; 
                                      script-src 'self' 'unsafe-inline' 'unsafe-eval' https://cdn.jsdelivr.net; 
                                      style-src 'self' 'unsafe-inline' https://cdn.jsdelivr.net; 
                                      img-src 'self' data: https:; 
                                      font-src 'self' data: https://cdn.jsdelivr.net; 
                                      connect-src 'self' http://localhost:8000 
                                                       http://backend:8000 
                                                       ws://frontend:5173 
                                                       wss://frontend:5173";


    # Logging
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for" '
                    'upstream_addr: $upstream_addr '
                    'upstream_status: $upstream_status '
                    'upstream_response_time: $upstream_response_time';
    access_log /var/log/nginx/access.log main;

    # Development server
    server {
        listen 80;
        server_name localhost;

        # API endpoints
        location /api/ {
            # Remove trailing slash to match FastAPI routes
            rewrite ^/(.*)/$ /$1 break;

            proxy_pass http://backend_servers;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # Enable WebSocket support if needed
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
        }
        # Static assets with caching
        location /assets/ {
            proxy_pass http://frontend_servers/assets/;
            expires 1y;
            add_header Cache-Control "public, no-transform";
        }

        # Fallback error page
        location = /50x.html {
            root /usr/share/nginx/html;
        }
        # Development Mode: Proxy to Vite dev server
        location / {
            proxy_pass http://frontend_servers;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
            proxy_cache_bypass $http_upgrade;
            
            # Error handling
            proxy_intercept_errors on;
            error_page 404 /index.html;
            error_page 500 502 503 504 /50x.html;
        }
    }

    # Production server (commented out for development)
    # server {
    #     listen 8080;  # Different port for production
    #     server_name localhost;
    #     root /usr/share/nginx/html;
    #     index index.html;
    #
    #     # Static asset caching
    #     location /assets/ {
    #         expires 1y;
    #         add_header Cache-Control "public, no-transform";
    #     }
    #
    #     # SPA routing
    #     location / {
    #         try_files $uri $uri/ /index.html;
    #         expires -1;
    #         add_header Cache-Control "no-store, no-cache, must-revalidate";
    #     }
    #
    #     # Error pages
    #     error_page 404 /index.html;
    #     error_page 500 502 503 504 /50x.html;
    #     location = /50x.html {
    #         root /usr/share/nginx/html;
    #     }
    # }
}