# TODO: can i change the default service names: docker-nginx-1 for openfing-chat-nginx?

x-common-restart-policy: &restart-policy
    restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 1
        window: 120s

x-common-healthcheck: &healthcheck
    interval: 5s #1m
    timeout: 3s #10s
    retries: 1
    start_period: 10s

services:
    db:
        image: pgvector/pgvector:pg17
        ports:
            # TODO: this should be in the .env so it matches with the url in prefect?
            - "5432:5432"
        environment:
            POSTGRES_USER: ${DATABASE_USER}
            POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
            POSTGRES_DB: ${DATABASE_DB}

            # Optimizations for pgvector
            POSTGRES_MAX_CONNECTIONS: 100
            PGDATA: /var/lib/postgresql/data/pgdata
            # Important pgvector configurations
            POSTGRES_SHARED_PRELOAD_LIBRARIES: vector
            # Vector dimension should match your embedding model
            # - All-MiniLM-L6-v2: 384
            # - text-embedding-3-small: 1536
            PG_VECTOR_DIMENSION: ${EMBEDDINGS_DIMENSION}
        volumes:
            - postgres_data:/var/lib/postgresql/data
            - ./postgres/postgresql-custom.conf:/etc/postgresql/postgresql-custom.conf
            - ./postgres/postgresql.conf:/etc/postgresql/postgresql.conf
        command:
            ["postgres", "-c", "config_file=/etc/postgresql/postgresql.conf"]
        healthcheck:
            test:
                [
                    "CMD-SHELL",
                    "pg_isready -U ${DATABASE_USER} -d ${DATABASE_DB}",
                ]
            <<: *healthcheck
        networks:
            - rag_network
        deploy:
            resources:
                limits:
                    memory: 1G
                reservations:
                    memory: 512M
            <<: *restart-policy

    backend:
        build:
            context: ..
            dockerfile: ./docker/backend/Dockerfile.dev
        volumes:
            - ../.git:/app/.git:cached # Mount .git with correct path and caching
            - ~/.gitconfig:/root/.gitconfig:ro
            - ../backend:/app/backend:cached # Mount for hot reload with better performance
            - backend_poetry_cache:/app/backend/.venv # Named volume for Poetry virtualenv
            - ./backend/entrypoint.sh:/app/backend/entrypoint.sh:ro # Mount entrypoint separately with read-only flag
            - ./.env:/app/backend/app/core/.env:ro # Mount .env separately with read-only flag

            - ../.pre-commit-config.yaml:/app/.pre-commit-config.yaml # TODO: volver a dejar readonly :ro
            - ~/.cache/pre-commit:/root/.cache/pre-commit # cache pre-commit environments

            - ../../download_and_transcript:/app/transcripts:ro

            # TODO: map logs app/log into docker/backend/log
        environment:
            - DATABASE_URL=postgresql+psycopg://${DATABASE_USER}:${DATABASE_PASSWORD}@${DATABASE_HOST}:${DATABASE_PORT}/${DATABASE_DB}
            # Add vector settings
            - VECTOR_STORE_COLLECTION=rag_chunks
            - EMBEDDING_DIMENSION=384 # Match with your mode

            - OPENAI_API_KEY=${OPENAI_API_KEY}
            # TODO: not sure if i need this here
            - PREFECT_API_URL=http://prefect:4200/api
            - ENVIRONMENT=development
            - LOG_LEVEL=${LOG_LEVEL:-INFO}
            - PYTHONPATH=/app/backend
        depends_on:
            db:
                condition: service_healthy
            prefect:
                condition: service_healthy
        command: ["/app/backend/entrypoint.sh"]
        # command: ["sleep", "infinity"]
        networks:
            - rag_network
        healthcheck:
            test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/health"] # TODO: can i change this localhost for backend?
            # this url should match with the one defined at main.py
            <<: *healthcheck
        deploy:
            replicas: 1
            # resources:
            # # TODO: estaria bueno poner limits en prod
            #   limits:
            #       cpus: "1"
            #       memory: 1G
            <<: *restart-policy
        # TODO: investigar esto de develop, capaz es util para el front tmbn
        develop:
            watch:
                - action: sync
                  path: ../backend
                  target: /app
                  ignore:
                      - "**/*.pyc"
                      - "**/__pycache__"
                      - "**/.pytest_cache"

    nginx:
        image: nginx:alpine # TODO: use a fix tag version
        ports:
            - "3000:80" # map port 80 of container to 3000 host
        volumes:
            - ./frontend/nginx.dev.conf:/etc/nginx/nginx.conf:ro
            - ./frontend/nginx/logs:/var/log/nginx
        depends_on:
            - frontend
            - backend
        networks:
            - rag_network
        healthcheck:
            test: ["CMD", "curl", "-f", "http://localhost:80"]
            <<: *healthcheck

    frontend:
        build:
            context: ..
            dockerfile: ./docker/frontend/Dockerfile.dev
        volumes:
            - ../.git:/app/.git:cached
            - ~/.gitconfig:/root/.gitconfig:ro
            - ../frontend:/app/frontend:cached # Cache frontend source files
            - frontend_node_modules:/app/frontend/node_modules # Named volume for node_modules
        environment:
            # TODO: ver si aca deberia ser api/v1 . fijarse donde se usa en el front
            - VITE_API_URL=/api # Using nginx proxy path TODO
        networks:
            - rag_network
        healthcheck:
            test: ["CMD", "curl", "-f", "http://localhost:5173"] # TODO: change this localhost to frontend?
            <<: *healthcheck
        command: pnpm run dev -- --host 0.0.0.0 # TODO: define command here or in deockerfile

    prefect:
        image: prefecthq/prefect:3-python3.12
        ports:
            - "4200:4200" # API y UI
        environment:
            - PREFECT_SERVER_API_HOST=0.0.0.0
            - PREFECT_SERVER_API_PORT=4200
            - PREFECT_API_URL=http://prefect:4200/api
            - PREFECT_UI_URL=http://prefect:4200

            - PREFECT_LOGGING_LEVEL=INFO
            - PREFECT_API_SERVICES_SCHEDULER_ENABLED=true

            # - PREFECT_API_DATABASE_CONNECTION_URL=postgresql+asyncpg://${DATABASE_USER}:${DATABASE_PASSWORD}@db:5432/${DATABASE_DB_PREFECT}
            - DATABASE_URL=postgresql+psycopg://${DATABASE_USER}:${DATABASE_PASSWORD}@${DATABASE_HOST}:${DATABASE_PORT}/${DATABASE_DB_PREFECT}
        volumes:
            - prefect_data:/root/.prefect
        depends_on:
            db:
                condition: service_healthy
        networks:
            - rag_network
        healthcheck:
            test:
                [
                    "CMD",
                    "python",
                    "-c",
                    "import urllib.request; urllib.request.urlopen('http://0.0.0.0:4200/api/health')",
                ]
            <<: *healthcheck
        deploy:
            <<: *restart-policy
        command: ["prefect", "server", "start"]

    # worker:
    #     build:
    #         context: ..
    #         dockerfile: ./docker/prefect/Dockerfile.worker
    #     environment:
    #         - PREFECT_API_URL=http://prefect:4200/api
    #         # this might be wrong, see url in prefect service
    #         - DATABASE_URL=postgresql://${DATABASE_USER}:${DATABASE_PASSWORD}@db:5432/${DATABASE_DB}
    #         # - PREFECT_API_DATABASE_CONNECTION_URL=postgresql+asyncpg://${DATABASE_USER}:${DATABASE_PASSWORD}@db:5432/${DATABASE_DB_PREFECT}

    #         - OPENAI_API_KEY=${OPENAI_API_KEY}
    #         - PREFECT_LOGGING_LEVEL=INFO
    #         - PREFECT_WORKER_PREFETCH_SECONDS=60
    #         - PREFECT_WORKER_TAG=rag-worker
    #     volumes:
    #         - ./backend:/app # Acceso al cÃ³digo de flows
    #         - worker_cache:/root/.cache
    #     depends_on:
    #         prefect:
    #             condition: service_healthy
    #     networks:
    #         - rag_network
    #     deploy:
    #         replicas: 1 # Puedes escalar horizontalmente los workers
    #         <<: *restart-policy

    # # monitoring:
    #   image: prom/prometheus:latest
    #   volumes:
    #     - ./monitoring/prometheus.yaml:/etc/prometheus/prometheus.yaml
    #   ports:
    #     - "9090:9090"
    #   networks:
    #     - rag_network
    #   depends_on:
    #     - backend
    #     - prefect

volumes:
    postgres_data:
        driver: local
    backend_poetry_cache:
    frontend_node_modules:
    prefect_data:
    worker_cache:

networks:
    rag_network:
        driver: bridge
